# This is a file containing all information to draw all layouts for qtlcnc.
# 	Created 31.07.2018 by Nick Yakutovich (aka robotustra).
# # - menas a comment line
# All text after # is not interpreted.

# All parameters input in here in Forth like style just because it's faster and easier to parse them.

# First we have to set the geometry of the display where the program window will appear

# Define the size of logical grid where all buttons, sliders, etc will be placed.
# For simplicity and nice look I use square unit of size [ucell x ucell]

# IVAR - defines the variable with the name "ucell" and value 100.
# you can put floating point number, but it will be rounded to integer.
# usell is set in pixels.
# Variable names and commands are case sensitive. 
100 ucell IVAR  	 	

# All coordinates of elements like buttons will be done in these ligical units,
# For example, if you want to place a button to the left top corner, then the coordinates of the button will be 0,0
# for button on the right top side will be for instance 20,0. Left bottom - 0,15, and so on.

# Layout offset is set in pixels, from the top left cofner of client area of window: <x_offset> <y_offset> LOFFS

10 xoffs IVAR
15 yoffs IVAR
xoffs yoffs LOFFS

# Or you can put just : 10 15 LOFFS

# The flag "lauto" shows if program should calculate geometry from desktop parameters.
# The automatically calculated values could give not very nice result. If it set to 0, prigram gets all geometry
# from this file. If it set to 1 - ignore the geometry given here.
0 lauto IVAR

# Geometry of the window with respect to display coordinates and size of the windows
# if lauto == 1 these params are ignored and application is trying to load full screen mode.
# syntax: dx dy wx wy GEOM
0 -15 1980 1024 GEOM 

# Define layout grid size
# syntax: horizontal_number_of_cells vertical_number_of_cells GRID
24 12 GRID

# As soon as the app is building the screen layouts dynamically have to define all elements and add them to layout one by one.
# There are some types of elements like 
# 1) button
# 2) text label
# 3) linear indicator
# 4) gl view
# may be some more later...

# Define Stop button
# Syntax: pos size bg_color line_color pictogram_path command btn_name BUTTON
22 10 sb_pos IVEC2
2 2 size_2x2 IVEC2
"red" bg_color STRI
"black" p_color STRI
# syntax: "string_value" name_of_string_param STRI
"command to execute" stop_cmd SRTI

# Element status is the string which defines the element state 
"" stop_status STRI 
# Define the pictogram in the square unit 100x100. Pictogram is scaled to the button size.
# syntax: x0,y0 x1,y1 .... ; .... ; .... pmane PATH
10,10 20,20 40,20; 23,23 43,90 cb_pic PATH

# Stop button one state
sb_pos size_2x2 bg_color p_color sb_pic stop_cmd stop_status stop_btn_state1 STAT
# Stop button is defined and have 1 state only. Buttons can have as many states as needed, and the switching between sates
# is done through the change of status string.
stop_btn_state1 stop_btn BUTTON


# Define Start button 
22 9 start_but_pos IVEC2
1 1 size_1x1 IVEC2
"green" bg_color_green STRI
10,10 20,20 40,20; 23,23 43,90 start_pic PATH
"start script to execute" start_cmd STRI
"" start_status STRI
# parameter p_color (pen color) could be reused for other elements.
start_but_pos size_1x1 bg_color_green p_color start_pic start_cmd start_status start_btn_state1 STAT
start_btn_state1 start_btn BUTTON



