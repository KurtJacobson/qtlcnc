# This is a file containing all information to draw all layouts for qtlcnc.
# 	Created 31.07.2018 by Nick Yakutovich (aka robotustra).
# # - menas a comment line
# All text after # is not interpreted.

# All parameters input in here in Forth like style just because it's faster and easier to parse them.

# First we have to set the geometry of the display where the program window will appear

# Define the size of logical grid where all buttons, sliders, etc will be placed.
# For simplicity and nice look I use square unit of size [ucell x ucell]

# IVAR - defines the variable with the name "ucell" and value 100.
# you can put floating point number, but it will be rounded to integer.
# usell is set in pixels.
# Variable names and commands are case sensitive. 
60 ucell IVAR  	 	

# All coordinates of elements like buttons will be done in these ligical units,
# For example, if you want to place a button to the left top corner, then the coordinates of the button will be 0,0
# for button on the right top side will be for instance 20,0. Left bottom - 0,15, and so on.

# Layout offset is set in pixels, from the top left cofner of client area of window
2 xoffs IVAR
18 yoffs IVAR
# status bar height
38 statoffs IVAR 
0 border IVAR


# Or you can put just : 10 15 LOFFS

# The flag "lauto" shows if program should calculate geometry from desktop parameters.
# The automatically calculated values could give not very nice result. If it set to 0, prigram gets all geometry
# from this file. If it set to 1 - ignore the geometry given here.
0 lauto IVAR

# Geometry of the window with respect to display coordinates and size of the windows
# if lauto == 1 these params are ignored and application is trying to load full screen mode.
# 
0 	geom_dx IVAR 	# offset of the window from the left edge
-15 geom_dy IVAR	# offset of the window from the top edge
1980 geom_wx IVAR	# width of the window
1024 geom_wy IVAR 	# height of the window


# Define layout grid size
# xgrid - the number of cells by horizontal
# ygrid - the number of cells by vertical
18 xgrid IVAR
12 ygrid IVAR

# As soon as the app is building the screen layouts dynamically have to define all elements and add them to layout one by one.
# There are some types of elements like 
# 1) button
# 2) text label
# 3) linear indicator
# 4) gl view
# may be some more later...

# Define Stop button
# Syntax: pos size bg_color line_color pictogram_path command btn_name BUTTON
22 10 sb_pos IVEC2
2 2 size_2x2 IVEC2
"red" bg_color STRI
"black" p_color STRI
# syntax: 'string_value_with_spaces_and_or_tabs' name_of_string_param STRI
'command to execute' stop_cmd SRTI

# Element status is the string which defines the element state 
'' stop_status STRI 
'one more test string' other_cmd STRI

# Define the pictogram in the square unit 100x100. Pictogram is scaled to the button size.
# Path has a multiple string parameter to add.
# Eash parameter has a mini command to encode the path:
# 1) "10,20M" means  move(10,20)
# 2) "30,40L" means  lineTo(30,40)
# 3) "1,2,180,5A" means the arc with directing vector (1,2) CCW on 180 degree, with radius 5
# 4) "1,2,-180,10A" means the arc with direction vector (1,2) CW on 180 degree, with radius 10.
# 5) "1,2,30,40E" means closed circle or ellipse on the rectangle box
# 6) "1,2,30,40R" means rectangle
# 7) "1,2,4C"  means circle with the radius 4 and the center point (1,2)
#
# These are flat pathes, but for 3d stuff PATH3D should be use.

"10,5M" 				# move to the point x=10, y=5 	
"90,5L"					# lineTo (90,5)
"1,0,-90,5A"			# Arc, starting parallel to X axis and going CW 90 degree with radius 5 comes to the point (95,10)
"95,90L"				# lineto (95,90)
"0,1,-90,5A"			# arc, starting in direction down, (because Y is directed down it's positive) , radius 5, CW 90 degree. 
"10,95L"				# lineto (x=10,y=95)
"-1,0,-90,5A"			# Arc CW 90 degree, negative X direction comes to point (x=5,y=90)
"5,10L"					# line to (5,10)
"0,-1,-90,5A"
sb_pic1 PATH

# Stop button one state
sb_pos 		POS				# position of the button (or any object) 
size_2x2 	SIZE    		# 
bg_color 	BGCOL   		# the color of the button
p_color  	PCOL    		# pen color
sb_pic1     PIX		 		# a path of the drawings 
stop_cmd 		CMDL			# a command line which state emits when activated
stop_status 	STATL			# the status line which could be changed by other controls or by other states.
stop_btn_state1 	STATE

# State can have as many path as needed and they all be drawn, with corresponding pen and bg colors.
# To define the a number of pix with the color use syntax
# a1 BGCOL b1 PCOL c1 PIX ... a2 BGCOL b2 PCOL c2 PIX ....  or
# a1 BGCOL a2 BGCOL ... b1 PCOL b1 PCOL ... c1 PIX c2 PIX ...
# the sequence of pen, bg colors and PIX is not important, but the number of them should match.
# otherwise not all pathes might be drawn.



# Stop button is defined and have 1 state only. Buttons can have as many states as needed, and the switching between sates
# is done through the change of status string.
stop_btn_state1 stop_btn BUTTON


# Define Start button 
22 9 start_b_pos IVEC2
1 1 size_1x1 IVEC2
"green" bg_color_green STRI

# for now I just copy the contour from stop button but after I'll modify it.
"10,5M" 				# move to the point x=10, y=5 	
"90,5L"					# lineTo (90,5)
"1,0,-90,5A"			# Arc, starting parallel to X axis and going CW 90 degree with radius 5 comes to the point (95,10)
"95,90L"				# lineto (95,90)
"0,1,-90,5A"			# arc, starting in direction down, (because Y is directed down it's positive) , radius 5, CW 90 degree. 
"10,95L"				# lineto (x=10,y=95)
"-1,0,-90,5A"			# Arc CW 90 degree, negative X direction comes to point (x=5,y=90)
"5,10L"					# line to (5,10)
"0,-1,-90,5A"
start_pic1 PATH


'start script to execute' start_cmd STRI
"" start_status STRI

# parameter p_color (pen color) could be reused for other elements.
start_b_pos 	POS
size_1x1 		SIZE
bg_color_green 	BGCOL
p_color 		PCOL
start_pic1 		PIX
start_cmd 		CMDL
start_status 	STATL
start_btn_state1 STATE

# define start button with 1 state
start_btn_state1 start_btn BUTTON

# creating layouts to display.
# layout can include buttons, labels, indicators, glview, knobs, code frame, etc

# for now we just have 2 buttons in layout
# consider the first described layout as a default.
stop_btn
start_btn
main_layout LAYOUT


